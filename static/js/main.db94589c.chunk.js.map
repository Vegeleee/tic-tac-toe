{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","value","onClick","className","Board","squares","renderSquare","i","Game","props","state","history","Array","fill","stepNumber","xIsNext","handleClick","bind","this","slice","length","calculationWinner","setState","step","status","current","winner","moves","map","move","rowNumber","Math","floor","colNumber","desc","currentMoveStyle","fontWeight","backgroundColor","key","jumpTo","style","React","Component","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db94589c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Square = ({ value, onClick }) => {\n\treturn (\n\t\t<button\n\t\t\tclassName='square'\n\t\t\tonClick={onClick}\n\t\t>\n\t\t\t{value}\n\t\t</button>\n\t)\n}\n\nexport default Square","import React from 'react'\nimport Square from './Square'\n\nconst Board = ({ squares, onClick }) => {\n\tconst renderSquare = (i) => {\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tvalue={squares[i]}\n\t\t\t\tonClick={() => onClick(i)}\n\t\t\t/>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(0)}\n\t\t\t\t{renderSquare(1)}\n\t\t\t\t{renderSquare(2)}\n\t\t\t</div>\n\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(3)}\n\t\t\t\t{renderSquare(4)}\n\t\t\t\t{renderSquare(5)}\n\t\t\t</div>\n\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderSquare(6)}\n\t\t\t\t{renderSquare(7)}\n\t\t\t\t{renderSquare(8)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Board","import React from 'react'\nimport Board from './Board'\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thistory: [\n\t\t\t\t{\n\t\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t\t},\n\t\t\t],\n\t\t\tstepNumber: 0,\n\t\t\txIsNext: true,\n\t\t}\n\n\t\tthis.handleClick = this.handleClick.bind(this)\n\t}\n\n\thandleClick(i) {\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1)\n\t\tconst current = history[history.length - 1]\n\t\tconst squares = current.squares.slice()\n\n\t\tif (calculationWinner(squares) || squares[i]) {\n\t\t\treturn\n\t\t}\n\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O'\n\t\tthis.setState({\n\t\t\thistory: [...history, { squares, i }],\n\t\t\tstepNumber: history.length,\n\t\t\txIsNext: !this.state.xIsNext,\n\t\t})\n\t}\n\n\tjumpTo(step) {\n\t\tthis.setState({\n\t\t\tstepNumber: step,\n\t\t\txIsNext: step % 2 === 0,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst history = this.state.history\n\t\tconst current = history[this.state.stepNumber]\n\t\tconst winner = calculationWinner(current.squares)\n\n\t\tconst moves = history.map((step, move) => {\n\t\t\tconst rowNumber = Math.floor(step.i / 3) + 1\n\t\t\tconst colNumber = step.i - (rowNumber - 1) * 3 + 1\n\t\t\tconst desc = move\n\t\t\t\t? `Перейти к ходу #${move} (${colNumber}, ${rowNumber})`\n\t\t\t\t: 'К началу игры'\n\n\t\t\tlet currentMoveStyle = {}\n\t\t\tif (move === this.state.stepNumber) {\n\t\t\t\tcurrentMoveStyle = { fontWeight: 'bold', backgroundColor: '#ededed' }\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<li key={move}>\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)} style={currentMoveStyle}>\n\t\t\t\t\t\t{desc}\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t)\n\t\t})\n\n\t\tlet status\n\t\tif (winner) {\n\t\t\tstatus = 'Выиграл ' + winner\n\t\t} else {\n\t\t\tstatus = 'Следующий ход: ' + (this.state.xIsNext ? 'X' : 'O')\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board squares={current.squares} onClick={this.handleClick} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{status}</div>\n\t\t\t\t\t<ol>{moves}</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst calculationWinner = (squares) => {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t]\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i]\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn squares[a]\n\t\t}\n\t}\n\treturn null\n}\n\nexport default Game\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nconst App = () => {\n  return (\n\t\t<Game />\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}