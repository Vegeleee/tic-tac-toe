{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","value","winSquare","onClick","classes","push","className","join","Board","squares","winSquares","renderSquare","i","includes","key","renderRow","rowNumber","colsCount","row","Fragment","rowsCount","board","renderBoard","calculationWinner","lines","length","a","b","c","winner","Game","status","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","reverseList","setReverseList","current","moves","map","step","move","Math","floor","colNumber","desc","jumpTo","historyToStep","slice","reverse","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34b89209.chunk.js","sourcesContent":["import React from 'react'\n\nconst Square = ({ value, winSquare, onClick }) => {\n\tconst classes = ['square']\n\tif (winSquare) {\n\t\tclasses.push('winSquare')\n\t}\n\n\treturn (\n\t\t<button className={classes.join(' ')} onClick={onClick}>\n\t\t\t{value}\n\t\t</button>\n\t)\n}\n\nexport default Square\n","import React from 'react'\nimport Square from './Square'\n\nconst Board = ({ squares, onClick, winSquares }) => {\n\t/*\n\t\tРендерит клетку\n\t\tПринимает порядковый номер клетки\n\t\tВозвращает компонент Square\n\t*/\n\tconst renderSquare = (i) => {\n\t\tconst winSquare = winSquares ? winSquares.includes(i) : false\n\t\treturn (\n\t\t\t<Square\n\t\t\t\tkey={i}\n\t\t\t\tvalue={squares[i]}\n\t\t\t\twinSquare={winSquare}\n\t\t\t\tonClick={() => onClick(i)}\n\t\t\t/>\n\t\t)\n\t}\n\n\t/*\n\t\tРендерит строку клеток на игровом поле\n\t\tПринимает номер строки и количество колонок\n\t\tВозвращает массив клеток, длиной colsCount\n\t*/\n\tconst renderRow = (rowNumber, colsCount) => {\n\t\tconst row = []\n\n\t\tfor (\n\t\t\tlet i = rowNumber * colsCount;\n\t\t\ti < rowNumber * colsCount + colsCount;\n\t\t\ti++\n\t\t) {\n\t\t\trow.push(renderSquare(i))\n\t\t}\n\t\treturn row\n\t}\n\n\t/*\n\t\tРендерит игровое поле\n\t\tПринимает количество строк и количество колонок\n\t\tВозвращает массив эл-ов div, длиной rowsCount\n\t*/\n\tconst renderBoard = (rowsCount, colsCount) => {\n\t\tconst board = []\n\n\t\tfor (let i = 0; i < rowsCount; i++) {\n\t\t\tconst row = (\n\t\t\t\t<div key={i} className=\"board-row\">\n\t\t\t\t\t{renderRow(i, colsCount)}\n\t\t\t\t</div>\n\t\t\t)\n\t\t\tboard.push(row)\n\t\t}\n\n\t\treturn board\n\t}\n\n\treturn <React.Fragment>{renderBoard(3, 3)}</React.Fragment>\n}\n\nexport default Board\n","import React, { useState } from 'react'\nimport Board from './Board'\n\nconst Game = () => {\n\tconst [history, setHistory] = useState([\n\t\t{\n\t\t\tsquares: Array(9).fill(null),\n\t\t},\n\t])\n\tconst [stepNumber, setStepNumber] = useState(0)\n\tconst [xIsNext, setXIsNext] = useState(true)\n\tconst [reverseList, setReverseList] = useState(false)\n\n\t/*\n\t\tОбрабатывает клики по клеткам\n\t\tПринимает номер клетки, по которой произошел клик, присваивает клетке значение,\n\t\tобновляет состояние\n\t*/\n\tconst handleClick = (i) => {\n\t\tconst historyToStep = history.slice(0, stepNumber + 1) // История ходов до текущего номера хода включительно\n\t\tconst current = historyToStep[historyToStep.length - 1]\n\t\tconst squares = current.squares.slice()\n\n\t\t// Не обрабатывать клики, если побелитель определен (игра окончена) или клекте уже присвоено значение\n\t\tif (calculationWinner(squares).winner || squares[i]) {\n\t\t\treturn\n\t\t}\n\n\t\tsquares[i] = xIsNext ? 'X' : 'O'\n\n\t\tsetHistory([...historyToStep, { squares, i }])\n\t\tsetStepNumber(historyToStep.length)\n\t\tsetXIsNext(!xIsNext)\n\t}\n\n\t/*\n\t\tОбновляет состояние\n\t\tМеняет номер хода и текущего игрока\n\t*/\n\tconst jumpTo = (step) => {\n\t\tsetStepNumber(step)\n\t\tsetXIsNext(step % 2 === 0)\n\t}\n\n\tconst current = history[stepNumber]\n\tconst { winner, winSquares } = calculationWinner(current.squares)\n\n\t// Формирование списка ходов\n\tlet moves = history.map((step, move) => {\n\t\tconst rowNumber = Math.floor(step.i / 3) + 1 // Номер строки в которой находится клетка i\n\t\tconst colNumber = step.i - (rowNumber - 1) * 3 + 1 // Номер колонки в которой находится клетка i\n\t\tconst desc = move\n\t\t\t? `Перейти к ходу #${move} (${colNumber}, ${rowNumber})`\n\t\t\t: 'К началу игры'\n\n\t\t// Выделение выбранного эдемента в списке ходов\n\t\tlet classes = []\n\t\tif (move === stepNumber) {\n\t\t\tclasses.push('currentMove')\n\t\t}\n\n\t\treturn (\n\t\t\t<li key={move}>\n\t\t\t\t<button onClick={() => jumpTo(move)} className={classes.join(' ')}>\n\t\t\t\t\t{desc}\n\t\t\t\t</button>\n\t\t\t</li>\n\t\t)\n\t})\n\n\t// Определение статуса\n\tlet status\n\tif (winner) {\n\t\tstatus = 'Выиграл ' + winner\n\t} else if (!current.squares.includes(null)) {\n\t\tstatus = 'Ничья'\n\t} else {\n\t\tstatus = 'Следующий ход: ' + (xIsNext ? 'X' : 'O')\n\t}\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board\n\t\t\t\t\tsquares={current.squares}\n\t\t\t\t\twinSquares={winSquares}\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<div>{status}</div>\n\t\t\t\t<ol>{reverseList ? moves.reverse() : moves}</ol>\n\t\t\t\t{moves.length > 1 && (\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={\n\t\t\t\t\t\t\t() => setReverseList(!reverseList)\n\t\t\t\t\t\t\t// this.setState({ reverseList: !this.state.reverseList })\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\tСортировать по\n\t\t\t\t\t\t{reverseList ? ' возрастанию' : ' убыванию'}\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n/*\n\tОпределяет победителя\n\tПринимает массив клеток\n\tОбходит массив выигрышных комбинаций и проверяет равны ли значения ячеек в рамках одной комбинации\n\tЕсли равны, возырвщает объект содержащий победителя (Х или О) и выигрышную комбинацию\n\tЕслине равны, возвращает объект, у которого поля победителя и комбинации равны null\n*/\nconst calculationWinner = (squares) => {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t]\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i]\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn { winner: squares[a], winSquares: [a, b, c] }\n\t\t}\n\t}\n\treturn { winner: null, winSquares: null }\n}\n\nexport default Game\n","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nconst App = () => {\n  return (\n\t\t<Game />\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}